-- Database: zadanie1

-- DROP DATABASE IF EXISTS zadanie1l;

CREATE DATABASE zadanie1
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Polish_Poland.1250'
    LC_CTYPE = 'Polish_Poland.1250'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
	CREATE EXTENSION postgis;
	--tabela z punktami
	CREATE TABLE pktinfo(id INTEGER,geom GEOMETRY,name VARCHAR(50),liczprac INTEGER);
	INSERT INTO pktinfo VALUES(1,ST_GeomFromText('POINT(6 9.5)',0),'K',8);
	INSERT INTO pktinfo VALUES(2,ST_GeomFromText('POINT(6.5 6)',0),'J',4);
	INSERT INTO pktinfo VALUES(3,ST_GeomFromText('POINT(9.5 6)',0),'I',5);
	INSERT INTO pktinfo VALUES(4,ST_GeomFromText('POINT(1 3.5)',0),'G',2);
	INSERT INTO pktinfo VALUES(5,ST_GeomFromText('POINT(5.5 1.5)',0),'H',7);
	--tabela z drogami
	CREATE TABLE roads(id INTEGER, name VARCHAR(50),geom GEOMETRY);
	INSERT INTO roads VALUES(1,'roadx',ST_GeomFromText('LINESTRING(0 4.5,12 4.5)',0)); --0 to identyfikator ukłądu wspołrzędnych
	INSERT INTO roads VALUES(2,'roady',ST_GeomFromText('LINESTRING(7.5 10.5,7.5 0)',0));
	SELECT *,ST_AsText(geom) as WKT FROM roads; -- reprezentacja tekstowa i binarna
	
	--Tabela z budynkami
	CREATE TABLE buildings(id INTEGER,geom GEOMETRY,name VARCHAR(50),height INTEGER);
	INSERT INTO buildings VALUES(1,ST_GeomFromText('POLYGON ((3 8, 3 6,5 6,5 8,3 8))',0),'BuildingC',20);
	INSERT INTO buildings VALUES(2,ST_GeomFromText('POLYGON((4 7,4 5,6 5,6 7,4 7))',0),'BuildingB',40);
	INSERT INTO buildings VALUES(3,ST_GeomFromText('POLYGON((9 9,9 8,10 8,10 9,9 9))',0),'BuildingD',8);
	INSERT INTO buildings VALUES(4,ST_GeomFromText('POLYGON((1 2,1 1,2 1,2 2,1 2))',0),'BuildingF',15);
	INSERT INTO buildings VALUES(2,ST_GeomFromText('POLYGON((8 4,8 1.5,10.5 1.5,10.5 4,8 4))',0),'BuildingA',60);

--[ZADANIE 1] Całkowita długość dróg w analizowanym mieście
	SELECT SUM(ST_Length(geom)) FROM roads; --funkcja która zwraca długość linii, jej argumentem jest atrybut geometryczny. Dodajemy funjcje Sum aby zsumować długoś dróg
	
--[ZADANIE 2] Wypisz geometrię (WKT), pole powierzchni oraz obwód poligonu reprezentującego BuildingA. 
	SELECT name,ST_Area(geom) as pole,ST_Perimeter(geom) as obwod,ST_AsText(geom) as WKT FROM buildings
	WHERE name='BuildingA';
	
--[ZADANIE 3] Wypisz nazwy i pola powierzchni wszystkich poligonów w warstwie budynki. Wyniki posortuj alfabetycznie. 
	SELECT name,ST_Area(geom) as pole FROM buildings
	ORDER BY name;
	
--[ZADANIE 4] Wypisz nazwy i obwody 2 budynków o największej powierzchni
	SELECT name, ST_Perimeter(geom) as obwod FROM buildings
	ORDER BY ST_Area(geom) DESC LIMIT 2;
	
--[ZADANIE 5] Wyznacz najkrótszą odległość między budynkiem BuildingC a punktem G.  
	SELECT ST_AsText(ST_ShortestLine(buildings.geom,pktinfo.geom)) AS ShortestLine FROM buildings,pktinfo
	WHERE buildings.name='BuildingC' AND pktinfo.name = 'G';
	
--[ZADANIE 6] Wypisz pole powierzchni tej części budynku BuildingC, która znajduje się w odległości większej 
    --niż 0.5 od budynku BuildingB.
	SELECT ST_Area(ST_Difference((SELECT geom FROM buildings WHERE name= 'BuildingC'),ST_Buffer(geom,0.5))) FROM buildings
	WHERE name = 'BuildingB';

--[ZADANIE 7] Wybierz te budynki, których centroid (ST_Centroid) znajduje się powyżej drogi RoadX.
	SELECT buildings.name FROM buildings, roads
	WHERE ST_Y(ST_Centroid(buildings.geom)) >ST_Y(ST_Centroid(roads.geom)) AND roads.name='roadx'; 

--[ZADANIE 8] Oblicz pole powierzchni tych części budynku BuildingC i poligonu o współrzędnych (4 7, 6 7, 6 8, 
		--4 8, 4 7), które nie są wspólne dla tych dwóch obiektów.
	SELECT ST_AsText(ST_SymDifference(geom,'POLYGON ((4 7, 6 7, 6 8, 4 8, 4 7))',0)) FROM buildings 
	WHERE name = 'BuildingC';
	